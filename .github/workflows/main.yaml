# This is a basic workflow to help you get started with Actions
name: Deploy to ECR

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: gitops-argocd
  AWS_ACCOUNT_ID: 961936166279

jobs:

  deploy:
    name: Deploy to Amazon ECR
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/github-oidc
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActions

    - name: Login to Amazon ECR
      id: login-ecr
      run: aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}


# name: demo-gitops
# # permissions:
# #   id-token: write # required to use OIDC authentication
# #   contents: write # required
# #   actions: read
# #   security-events: write
# #   statuses: write

# on:
#   push:
#     branches: [ main ]
# env:
#   ECR_REPOSITORY: gitops-argocd

# jobs:
#   build:
#     name: Build and Pushing the Image
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout
#       uses: actions/checkout@v2

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         role-to-assume: arn:aws:iam::961936166279:role/github-oidc
#         role-duration-seconds: 900
#         aws-region: us-west-2
#     - name: Test AWS Creds
#       run: aws sts get-caller-identity

#     - name: Login to Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v1
      
#     - name: Build and tag image 
#       id: build-image
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         ECR_REPOSITORY: gitops-argocd

#       run: |
#         # Build a docker container and push it to ECR
#         git_hash=$(git rev-parse --short "$GITHUB_SHA")
#         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_REF##*/}-$git_hash .
#         echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_REF##*/}-$git_hash"
#         echo "::set-output name=tag::$git_hash"

#     - name: Extract metadata (tags, labels) for Docker
#       id: meta
#       uses: docker/metadata-action@v4.1.1
#       with:
#         images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}

#     - name: Image Scan
#       uses: aquasecurity/trivy-action@master
#       with:
#         image-ref: '${{ steps.meta.outputs.tags }}-${{ steps.build-image.outputs.tag }}'
#         format: 'table'
#         output: 'trivy-image-results'
#         severity: 'CRITICAL,HIGH'

#     - name: Push image to Amazon ECR
#       id: push-image
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         ECR_REPOSITORY: gitops-argocd

#       run: |
#         echo "Pushing image to ECR..."
#         git_hash=$(git rev-parse --short "$GITHUB_SHA")
#         docker push $ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_REF##*/}-$git_hash
#         echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_REF##*/}-$git_hash"
        
#     - name: Update Version
#       run: |
#           git_hash=$(git rev-parse --short "$GITHUB_SHA")
#           version=$(cat ./charts/helm-example/values.yaml | grep version: | awk '{print $2}')
#           sed -i "s/$version/${GITHUB_REF##*/}-$git_hash/" ./charts/helm-example/values.yaml
          
#     - name: Commit and push changes
#       uses: devops-infra/action-commit-push@v0.3
#       with:
#         github_token: ${{ secrets.GITHUB_TOKEN }}
#         commit_message: Version updated